#!/usr/bin/env node

/*
    Srclib-Nomos, a toolchain for Srclib to scan files w/ Nomos License Scanner
    Copyright (C) 2014 Fossa Inc.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

var BINARY = __dirname + '/../nomos/nomossa',
		WORKDIR = process.cwd(),
		TIMEOUT = 10000,
		fs = require('fs'),
		walk = require('fs-walk'),
		path = require('path'),
		spawn = require('child_process').spawn; 

var scan_file = function(file_path, cb) {
	//TODO: ensure valid file path
	var job = spawn(BINARY, [path.join(WORKDIR,file_path)]);

	var execd = false, timout_kill = setTimeout(function() {
		if(execd) return;
		//TODO: log timout commands
		job.kill('SIGINT');
	}, 10000);

	var stdout = '', stderr = ''; 
	job.stdout.on('data', function (data) { stdout += data; });
	job.stderr.on('data', function (data) { stderr += data; });

	job.on('close', function (code, signal) {
		execd = true;
		if(stderr) return cb(stderr);
		if(code || signal) return cb(new Error(code || signal));
		var success_header = "File " + path.basename(file_path) + " contains license(s) ";
		if(stdout.substring(0, success_header.length) != success_header) return cb(new Error(stdout));
		var raw_sigs = stdout.substring(success_header.length).split(','),
				trimmed_sigs = [];
		for(var i=0; i<raw_sigs.length; i++) {
			trimmed_sigs.push(raw_sigs[i].replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''));
		}
		return cb(null, trimmed_sigs);
	});
}

var parser = require("nomnom");

parser.command('scan-licenses')
  .option('repo', {
   	help: "the URI of the repository that contains the directory tree being scanned"
  })
  .option('subdir', {
   	default: ".",
   	help: "the path of the current directory (in which the scanner is run), relative to the root directory of the repository being scanned"
  })
  .callback(function(opts) {
  	if(!opts.repo) throw new Error("Invalid Repo URI");
  	var file_table = {},
				license_index = {};
  	walk.files(opts.subdir, function(basedir, filename, stat, next) {
  		var full_path = path.join(basedir, filename);
  		scan_file(full_path, function(err, license_sigs) {
  			if(err) return next(err);
				file_table[full_path] = license_sigs;
				for(var i=0; i<license_sigs.length; i++) {
					if(!license_index[license_sigs[i]]) license_index[license_sigs[i]] = [];
					license_index[license_sigs[i]].push(full_path);
				}
  			return next();
  		});
		}, function(err) {
		  //if(err) throw err; //supress errors for now
		  var srcunits = [],
		  		keys = Object.keys(license_index);
		  for(var q=0; q<keys.length; q++) {
		  	srcunits.push({
			    Name: keys[q],
			    Type: "LicenseUnit",
			    Repo: opts.repo,
			    Globs: "",
			    Files: license_index[keys[q]],
			    Dir: "",
			    Dependencies: [],
			    Info: {},
			    Data: {},
			    Config: {},
			    Ops: {}
				});
		  }
		  //todo: license inference and SPDX translation

		  // TOP_LEVEL_LICENSE = null;
			// var files = {};
			//scan directory for all files
			//scan all files for licenses
			//look for top-level indicators of licenses (README*, *LICENSE|LICENCE*, and maybe (NOTICE, COPYING, PATENTS, etc...)
			//check: does nomos work on readmes?

			//if so set a TOP_LEVEL_LICENSE as such and then apply that top-level to sub-files that have no license info

			// how to find licnese units

			// top level LICENSE first; search for in package file and LICENSE files
			// secondary files have independent license; if no license found try to inherit from package-level
			// unlicensed if theres no top level license to inherit from
			// break new licenses into a license unit

			// extra data: unrecognized licenses (licenses defined in packages)

		  return process.stdout.write(JSON.stringify(srcunits));
		});
  })
  .help("scan directory for licenses")

parser.parse();